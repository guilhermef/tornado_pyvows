{"name":"Tornado pyvows","body":"[![Build\r\nStatus](https://secure.travis-ci.org/rosner/tornado_pyvows.png?branch=master)](http://travis-ci.org/rosner/tornado_pyvows)\r\n\r\nTornado_pyVows\r\n==============\r\n\r\nThis project contains extensions to test Tornado apps under pyVows.\r\n\r\nTornadoHTTPContext\r\n------------------\r\n\r\nTo test a tornado app (or handlers) use this context instead of the regular\r\nVows.Context, like this:\r\n\r\n```python\r\nimport tornado\r\nfrom tornado_pyvows import TornadoHTTPContext\r\nfrom pyvows import Vows, expect\r\n\r\nclass HomeHandler(tornado.web.RequestHandler):\r\n    \r\n    def get(self):\r\n        self.write(\"hello_world\")\r\n\r\n    def post(self):\r\n        self.write(\"hello_world\")\r\n\r\n\r\n@Vows.batch\r\nclass SomeVows(TornadoHTTPContext):\r\n\r\n    def get_app(self):\r\n        application = tornado.web.Application([\r\n            (r\"/\", HomeHandler),\r\n        ])\r\n        return application\r\n\r\n    class HomeUrl(TornadoHTTPContext):\r\n        def topic(self):\r\n            self.http_client.fetch(self.get_url('/'), self.stop)\r\n            response = self.wait()\r\n            return response.body\r\n\r\n        def should_be_hello_world(self, topic):\r\n            expect(topic).to_equal(\"hello_world\")\r\n\r\n    class SameUrl(HomeUrl):\r\n        def topic(self):\r\n            \"\"\"\r\n            For convenience you can also use ``get`` and ``post`` to wrap the \r\n            calls to the ``http_client``.\r\n            \"\"\"\r\n            response = self.get(\"/\")\r\n            return response.body\r\n\r\n    class SimplePost(HomeUrl):\r\n        def topic(self):\r\n            response = self.post(\"/\")\r\n            return response.body\r\n```\r\n\r\nEach `TornadoHTTPContext` provides Tornado's testing methods like\r\n`http_client`, `get_url`, `stop`, `wait`, `fetch` and others. \r\n\r\nIf you're developing based on Tornados HTTPClient you can just do that with simple \r\nwrappers as seen in \r\n[client_vows.py](https://github.com/rosner/tornado_pyvows/blob/master/vows/client_vows.py)\r\n\r\nTornadoContext\r\n--------------\r\n\r\nIf you want to test a tornado based app without the HTTP overhead you may also\r\nuse the `TornadoContext`:\r\n\r\n```python\r\ndef asyncMethod(callback):\r\n    callback(\"Pseudo Async Result\")\r\n\r\n@Vows.batch\r\nclass AsyncVows(TornadoContext):\r\n\r\n    class CallbacksShouldWork(TornadoContext):\r\n\r\n        def topic(self):\r\n            self.io_loop = self.get_new_ioloop()\r\n            self.io_loop.add_callback(partial(asyncMethod, self.stop))\r\n            return self.wait()\r\n\r\n        def and_have_the_correct_result(self, topic):\r\n            expect(topic).to_equal(\"Pseudo Async Result\")\r\n```\r\n\r\nContributors\r\n============\r\n\r\nContributions are very welcome. To contribute fork it and create a pull request.\r\n\r\nThe team behind Tornado_pyVows (in order of joining the project):\r\n\r\n - Rafael Car√≠cio [@rafaelcaricio](https://github.com/rafaelcaricio)\r\n - Bernardo Heynemann [@heynemann](https://github.com/heynemann)\r\n - Daniel Truemper [@truemped](https://github.com/truemped)\r\n - Norman Rosner [@rosner](https://github.com/rosner)\r\n","tagline":"This project contains extensions to test Tornado apps under pyvows.","google":"UA-30646169-1","note":"Don't delete this file! It's used internally to help with page regeneration."}