Tornado_pyVows
==============

This project contains extensions to test Tornado apps under pyVows.

TornadoHTTPContext
------------------

To test a tornado app (or handlers) use this context instead of the regular
Vows.Context, like this:

```python
@Vows.batch
class SomeVows(TornadoHTTPContext):

    def get_app(self):
        application = tornado.web.Application([
            (r"/", HomeHandler),
        ])
        return application

    class HomeUrl(TornadoHTTPContext):
        def topic(self):
            self.http_client.fetch(self.get_url('/'), self.stop)
            response = self.wait()
            return response.body

        def should_be_hello_world(self, topic):
            expect(topic).to_equal('hello_world')
```

Each `TornadoHTTPContext` provides Tornado's testing methods like
`http_client`, `get_url`, `stop`, `wait`, `fetch` and others.

TornadoContext
--------------

If you want to test a tornado based app without the HTTP overhead you may also
use the `TornadoContext`:

```python
def asyncMethod(callback):
    callback("Pseudo Async Result")

@Vows.batch
class AsyncVows(TornadoContext):

    class CallbacksShouldWork(TornadoContext):

        def topic(self):
            self.io_loop.add_callback(partial(asyncMethod, self.stop))
            return self.wait()

        def andHaveTheCorrectResult(self, topic):
            expect(topic).to_equal("Pseudo Async Result")
```

Contributors
============

Contributions are very welcome. To contribute fork it and create a pull request.

The team behind Tornado_pyVows (in order of joining the project):

 - Rafael Car√≠cio [@rafaelcaricio](https://github.com/rafaelcaricio)
 - Bernardo Heynemann [@heynemann](https://github.com/heynemann)
 - Daniel Truemper [@truemperd](https://github.com/truemped)

